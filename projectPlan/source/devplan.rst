开发计划
------------

成员组织
************

本次开发计划使用类似于主程序员小组的方式[#TODO 请添加交叉参考]进行小组组织。 组织结构如[#TODO 需要添加结构图]所示。

各组员小组角色分配如下

======= ========= ============= ==========
姓名    学号        学院         小组角色
======= ========= ============= ==========
刘瀚骋   16231275  高等理工学院   主程序员
孟巧岚   16061053  计算机学院     备程序员
邓健     16061136  计算机学院     测试程序员
万秋驰   16061055  计算机学院     测试程序员
许文广   16061069  计算机学院     开发秘书
======= ========= ============= ==========


角色职责分配
**************
本节叙述不同小组角色的职责

主程序员
+++++++++++++

+ 管理项目开发进度。
+ 设计项目开发路线与体系结构。
+ 具体实施软件开发及硬件设计工作。
+ 分割开发任务, 与备程序员协同完成开发任务。
+ 与测试程序员交流, 完成软件测试工作。
+ 与开发秘书共同完成文档的撰写。

备程序员
++++++++++++++

+ 与主程序员交流，具体实施软件开发任务。
+ 与开发秘书共同完成文档的撰写。

测试程序员
++++++++++++++

+ 与主程序员交流，设计各个构件的测试方法, 并编写《测试文档》。
+ 编写测试代码, 完成软件测试。
+ 软件可持续集成与可持续交付的相关工作。

开发秘书
++++++++++++++

+ 与主程序员交流, 完成《需求分析文档》及《设计文档》的撰写
+ 管理并发布软件开发过程中产生的各种文档
+ 负责与甲方交流, 确保开发团队及甲方始终保持共识。


流程控制
***************

流程模型
++++++++++++++
本项目要求一定要在规定的日期前交付至少一个版本, 因此决定采用类似快速原型模型的流程进行开发。

本项目将开发过程分为四个环节:

1. 讨论调研
2. 需求分析建模
3. 编码与测试
4. 发布


模型实施
++++++++++++++++++
在开发初期我们将按照: 讨论调研-需求分析建模-编码与测试-发布这一流程完成第一次迭代。

在第一次迭代完成后, 讨论调研-需求分析建模与编码测试-发布这两个过程将独立异步进行。

为了保证时间节点与甲方的要求相同, 我们计划在2019年3月31次前至少完成一讨论-分析-编码过程。


版本号控制
******************
我们将基于构件进行版本号控制。即每一个构件均拥有自己独立的版本号。

构件的版本号将按照Semantic Versioning 2.0 标准进行编制。

此外, 整套系统拥有一个独立的系统版本号。 系统版本号同样使用Semantic Versioning 2.0标准进行编制。

发布新版本的系统程序时，需要额外说明当前版本的系统程序包含的构件版本。


交付产品
*************

本项目结束时计划交付的内容包括

========================== ============ =================================
项目名称                    类型            负责人
========================== ============ =================================
《项目开发计划书》           文档               主程序员
《需求分析》                文档               主程序员, 备程序员, 开发秘书
《系统设计说明》             文档               主程序员, 备程序员, 开发秘书
《测试文档》                文档                测试程序员, 开发秘书
《系统部署指南》             文档               主程序员, 开发秘书
 测试程序                   源代码              测试程序员
 系统程序                   源代码              主程序员, 备程序员
========================== ============ =================================

《项目开发计划书》
+++++++++++++++++++++

本文档用于阐述项目的开发计划。主要内容包括项目背景介绍，开发团队的组织管理方式，开发流程控制，计划交付内容及交付时间节点及风险控制等元信息。


《需求分析》
+++++++++++++++++
基于场景和数据两方面, 尽可能全面的分析本项目的需求。

基于场景的需求分析将从用户的视角出发, 讨论用户会以何种方式与本系统发生交互。使用自然语言和UML活动图, 对所有可能发生的交互场景进行建模。

基于数据的需求分析将结合基于场景的分析结果, 讨论为满足用户使用场景, 系统需要维护的数据和系统需要暴露的控制接口。
并使用 DFD( Data flow Diagram) 分别对

 1. 数据在系统中的传递与持久化
 2. 控制信号的传递

进行建模

《系统设计说明》
++++++++++++++++++++++
系统设计说明将自顶向下的描述系统的具体实现方式。自顶向下的顺序分别是设备级, 构件级, 类/方法级, 实现级四级。

设备定义为物理上独立的实体。设备级设计将规划系统运行所需要的设备以及设备间互联的基本方案。计划使用UML部署图来建模这一级的设计。

构件是运行在设备上, 且逻辑功能较为独立的软件。一个设备上可能会运行多个构件。构件级设计将规划每个构件实现的具体功能，使用的具体技术栈以及构件间的互联方式
。计划使用UML部署图来建模这一级的设计。

类/方法是组织逻辑的最小单元。若干个类/方法相互协作，组合成构件。计划使用ER图，UML类图来建模这一级的设计

实现指类/方法的具体代码。实现级文档不单独撰写，将会根据编码过程中的注释自动生成。

《测试文档》
++++++++++++++++++++++
测试文档计划阐述本项目的测试策略以及运行测试程序的方法。

测试程序
++++++++++++++++++++++
本项目计划使用黑盒测试的方法，编写单元测试。

系统程序
+++++++++++++++++
系统程序将以构件为单位进行发布。对于运行在嵌入式平台(非x86_64架构CPU)上的程序，计划发布交叉编译后的二进制文件; 
对于运行在通用平台(x86_64架构CPU)上的程序, 计划以docker容器的形式和源代码+构建脚本两种形式进行发布。
